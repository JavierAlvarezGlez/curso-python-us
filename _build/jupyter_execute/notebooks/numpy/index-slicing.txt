import numpy as np

v = np.arange(10)

v[5]

v[5:8]

l = list(range(10))
l_slice = l[5:8]
v_slice = v[5:8]
l_slice[:] = [12, 12, 12]
v_slice[:] = 12

print(l)
print(v)

v_slice[1] = 12345
print(v_slice)

print(v)

C2d = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
C2d[2]

C2d[0][2]

C2d[0, 2]

C3d = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
C3d

C3d[0]

[i for i in np.ndenumerate(C3d)]

old_values = C3d[0].copy()
C3d[0] = 42
C3d

C3d[0] = old_values
C3d

C2d

C2d[:2]

C2d[:2, 1:]

C2d[1, :2]

C2d[1:2,:2]

C2d[:2, 2]

C2d[:, :1]

C2d[:2, 1:] = 0
C2d

slice_1 = slice(2, 0, -1)
slice_2 = slice(0, 3, 2)

C2d[slice_1, slice_2]

nombres = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])

rng = np.random.default_rng()
data = rng.normal(0, 1, (7, 4))
data

nombres == 'Bob'

data[nombres == 'Bob']

data[nombres == 'Bob', 2:]

data[nombres == 'Bob', 3]

data[~(nombres == 'Bob')]

mask = (nombres == 'Bob') | (nombres == 'Will')
mask

data[mask]

data < 0

data[data < 0] = 0
data

data[~(nombres == 'Joe')] = 7
data

D = np.arange(15).reshape((3, 5))
print(D)

print(D.T)

E = rng.normal(0, 1, (6, 3))
E

np.dot(E[:, 0], E[:, 1]) # producto escalar de dos columnas

np.dot(E[2],E[4]) # producto escalar de dos filas

np.dot(E, E[0]) # producto de una matriz por un vector

np.dot(E.T, E)   # producto de dos matrices

A = np.arange(3*7*4*5).reshape(3, 7, 4, 5)
B = np.arange(3*7*5*6).reshape(3, 7, 5, 6)

np.dot(A, B).shape

np.matmul(A, B).shape # similar a A @ B

M = np.arange(10)
M

np.sqrt(M) # raiz cuadrada de cada componente

np.exp(M.reshape(2,5)) # exponencial de cad componente

x = rng.normal(0, 1, 8)
y = rng.normal(0, 1, 8)
x, y

np.maximum(x, y)

xarr = np.array([1.1, 1.2, 1.3, 1.4, 1.5])
yarr = np.array([2.1, 2.2, 2.3, 2.4, 2.5])
mask = np.array([True, False, True, True, False])

result = [(x if c else y) for x, y, c in zip(xarr, yarr, cond)]
result

result = np.where(mask, xarr, yarr)
result

F = rng.normal(0, 1, (4, 4))

F, np.where(F > 0, 2, -2)

np.where(F > 0, 2, F) 

np.select([np.abs(F) > 2, np.abs(F) > 1], ["Poco probable", "Algo probable"], "Frecuente")

G = rng.normal(0, 1, (5, 4))
G

G.sum()

G.mean()

G.cumsum() # por defecto, se aplana el array y se hace la suma acumulada

G.mean(axis=1)

G.sum(axis=0)

G.cumsum(axis=0)

G, G.argmin(axis=0)

H = rng.normal(0, 1, 50)
H

(H > 0).sum() # Number of positive values

bools = np.array([False, False, True, False])
bools.any(),bools.all()

np.any(H > 0)

np.all(H < 10)

np.any(H > 15)

np.all(H > 0)

J = np.arange(10)
np.save('un_array', J)

np.load('un_array.npy')

np.savez('array_archivo.npz', a=J, b=J**2)

arch = np.load('array_archivo.npz')
arch['b']

arch['a']

list(arch)

np.savez_compressed('arrays_comprimidos.npz', a=J, b=J**2)

!rm un_array.npy
!rm array_archivo.npz
!rm arrays_comprimidos.npz


