def add(x, y):
    return x + y

a = add(2, 3)

def foo():
    return "bar", "baz"

a, b = foo()
print(a, b)

def count_even(numbers):
    l = len([x for x in numbers if x % 2 == 0])
    return l

count_even([2, 3, 4, 5, 6, -2])

def f(a, b=3):
    print(a)
    print(b)

f(a=2)

f(a=2, b=1)

def f(a, b, c=1, d):
    pass

def f(x, items=[]):
    items.append(x)
    return items

a = f(1)
b = f(2)
c = f(3)
print(c)

def f(x, items=None):
    if items is None:
        items = []
    items.append(x)
    return items

a = f(1)
b = f(2)
c = f(3)
print(c)

def product(first, *args):
    result = first
    for x in args:
        result = result * x
    return result

product(10, 20)

product(10, 20, 5)

def f(w, x, y, z):
    pass

# ✅
f("foo", 3, z=[1, 2], y=22)

# ❌
f(3, 22, w="foo", z=[1, 2])

def product(first, *args, scale=1):
    result = first * scale
    for x in args:
        result = result * x
    return result

def read_data(filename, *, debug=False):
    pass

data = read_data("Data.csv", True)

data = read_data("Data.csv", debug=True)

def make_table(data, **kwargs):

    font_color = kwargs.pop("font_color", "black")
    bg_color = kwargs.pop("bg_color", "white")
    width = kwargs.pop("width", None)
    # otros argumentos...
    if kwargs:
        # lanza un error si hay otras configuraciones 
        pass

def f(*args, **kwargs):
    print(args)
    print(kwargs)

f(3, 2, a="foo", debug=False)

def f(x, y, z):
    pass

s = (1, "foo", [0, 1])

d = {
    "x": 1,
    "y": "foo", 
    "z": [0, 1]
}

f(*s)
f(**d)

def square(x):
    return x * x

square.__name__

def factorial(n):
    """
    Calcula el factorial de n. Por ejemplo, 

    >>> factorial(6)
    120
    """
    if n <= 1:
        return 1
    else: 
        return n*factorial(n-1)

print(factorial.__doc__)

def factorial(n: int) -> int:
    if n <= 1:
        return 1
    else: 
        return n * factorial(n - 1)

factorial.__annotations__

def init_foo():
    print("foo")
    return 0

def f(arg1=1, arg2=init_foo()):
    print(a, b)

arg1

def square(items):
    for i, x in enumerate(items):
        items[i] = x * x
    return items

a = [1, 2, 3, 4, 5]
square(a)

a

def square_nse(items):
    # Nada de side-effects
    items = [x * x for x in items]
    return items

a = [1, 2, 3, 4, 5]
square(a)

a

def f():
    n = n + 1

f()

def g():
    print(non_defined_var)

g()

global_var = "foo"
def h():
    print(global_var)

h()

x = 42
def f():
    x = 13
    print(x)

f()
print(x)

x = 42
def f():
    global x
    x = 13
    print(x)

f()
print(x)

a = lambda x, y: x + y

a(2, 3)

import time

def after(seconds, f):
    time.sleep(seconds)
    f()

def foo():
    print("Foo!")

after(10, foo)

nums = list(range(11))
filt = filter(lambda x: x%3 == 0, nums)
squares = map(lambda x: x*x, nums)

type(filt)

type(squares)

from functools import reduce 
nums = range(11)
total = reduce(lambda x, y: x + y, nums)
print(total)
